pipeline {
    agent any

        stages {

            stage('Build Env File') {

                steps {

                    withCredentials([usernamePassword(credentialsId: 'MYSQL_ROOT', passwordVariable: 'ROOT_PASSWORD', usernameVariable: 'ROOT_USERNAME')]) {
                        withCredentials([usernamePassword(credentialsId: 'MYSQL_USER_PASS_1', passwordVariable: 'PASSWORD_1', usernameVariable: 'USERNAME_1')]) {
                            withCredentials([usernamePassword(credentialsId: 'MYSQL_USER_PASS_2', passwordVariable: 'PASSWORD_2', usernameVariable: 'USERNAME_2')]) {
                                withCredentials([usernamePassword(credentialsId: 'MYSQL_USER_PASS_3', passwordVariable: 'PASSWORD_3', usernameVariable: 'USERNAME_3')]) {


                                    writeFile file: './MySQL/env.sh', text: """#!/bin/sh
ROOT_PASSWORD="${ROOT_PASSWORD}" 
MYSQL_USERNAME_1="${USERNAME_1}" 
MYSQL_USERNAME_2="${USERNAME_2}" 
MYSQL_USERNAME_3="${USERNAME_3}" 
MYSQL_USER_PASS_1="${PASSWORD_1}" 
MYSQL_USER_PASS_2="${PASSWORD_2}" 
MYSQL_USER_PASS_3="${PASSWORD_3}"
"""

                                }
                            }
                        }
                    }

                }
            }

            stage('SSH Public And Scripts') {

                steps {

                    sshPublisher(
                            publishers: [
                            sshPublisherDesc(
                                configName: "${SSH_SERVER}",
                                transfers: [
                                sshTransfer(cleanRemote: false,
                                    excludes: '',
                                    execCommand: '''
                                    cd pipeline_mysql_setup/MySQL
                                    


                                    log_dir="$HOME/log/jenkins-ssh"
                                    mkdir -p $log_dir
                            
                                    log_file="$log_dir/mysql-jenkins-setup-log.out"
                                    touch $log_file
                            
                                    exec 3>&1 4>&2
                                    trap 'exec 2>&4 1>&3' 0 1 2 3
                                    exec 1>$log_file 2>&1
                                     
                                    
                                     
                                    chmod +x env.sh
                                    . ./env.sh
                                    rm -rf env.sh

                                    
                                    
                                    DB_NAME="ezcampus_db"
                                    CONTAINER_NAME="mysql-instance"
                                    
                                    
                                    if docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}$"; then
                                    
                                        echo "Docker container with name $CONTAINER_NAME already exists, it must be removed first"
                                    
                                        exit 1
                                    
                                    fi
                                    
                                    
                                    if [ -n "${ROOT_PASSWORD}" ]; then
                                    
                                        echo "Docker run creating container with name: $CONTAINER_NAME"
                                    
                                        docker run --restart always --name $CONTAINER_NAME -p 127.0.0.1:3306:3306 -e MYSQL_DATABASE="$DB_NAME" -e MYSQL_ROOT_PASSWORD="$ROOT_PASSWORD" -d --network=EZnet mysql
                                    
                                    else
                                    
                                        echo "ROOT_PASSWORD env var is not set, this is required!"
                                    
                                        exit 1
                                    
                                    fi
                                    
                                    while true; do
                                    
                                        echo "Waiting for MySQL to respond..."
                                    
                                        docker exec $CONTAINER_NAME mysqladmin ping -uroot -p"${ROOT_PASSWORD}" &>/dev/null && break
                                    
                                        sleep 1
                                    done
                                    
                                    echo "MySQL server is ready, creating users..."
                                    
                                    # Checking if MySQL is Ready
                                    echo "Checking MySQL status..."
                                    while :
                                    do
                                        docker exec $CONTAINER_NAME mysql -uroot -p$ROOT_PASSWORD -e "status" > /dev/null 2>&1
                                        result=$?
                                        if [ $result -eq 0 ]; then
                                            echo "MySQL is ready."
                                            break
                                        else
                                            echo "MySQL is not ready yet, waiting..."
                                            sleep 1
                                        fi
                                    done
                                    
                                    # Creating a database
                                    echo "Creating a database..."
                                    # docker exec $CONTAINER_NAME mysql -uroot -p$ROOT_PASSWORD -e "CREATE DATABASE $DB_NAME;"
                                    
                                    # Check and create each user
                                    if [ ! -z "$MYSQL_USERNAME_1" ] && [ ! -z "$MYSQL_USER_PASS_1" ]; then
                                        echo "Creating MySQL user with name $MYSQL_USERNAME_1"
                                        docker exec $CONTAINER_NAME mysql -uroot -p"$ROOT_PASSWORD" -e "CREATE USER '$MYSQL_USERNAME_1'@'%' IDENTIFIED BY '$MYSQL_USER_PASS_1';"
                                        docker exec $CONTAINER_NAME mysql -uroot -p"$ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_USERNAME_1'@'%' WITH GRANT OPTION;"
                                    fi
                                    
                                    if [ ! -z "$MYSQL_USERNAME_2" ] && [ ! -z "$MYSQL_USER_PASS_2" ]; then
                                        echo "Creating MySQL user with name $MYSQL_USERNAME_2"
                                        docker exec $CONTAINER_NAME mysql -uroot -p"$ROOT_PASSWORD" -e "CREATE USER '$MYSQL_USERNAME_2'@'%' IDENTIFIED BY '$MYSQL_USER_PASS_2';"
                                        docker exec $CONTAINER_NAME mysql -uroot -p"$ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_USERNAME_2'@'%' WITH GRANT OPTION;"
                                    fi
                                    
                                    if [ ! -z "$MYSQL_USERNAME_3" ] && [ ! -z "$MYSQL_USER_PASS_3" ]; then
                                        echo "Creating MySQL user with name $MYSQL_USERNAME_3"
                                        docker exec $CONTAINER_NAME mysql -uroot -p"$ROOT_PASSWORD" -e "CREATE USER '$MYSQL_USERNAME_3'@'%' IDENTIFIED BY '$MYSQL_USER_PASS_3';"
                                        docker exec $CONTAINER_NAME mysql -uroot -p"$ROOT_PASSWORD" -e "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_USERNAME_3'@'%' WITH GRANT OPTION;"
                                    fi
                
                                    
                                    echo "Setup is completed successfully!"

                                   
                                    ''',
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: 'pipeline_mysql_setup',
                                    remoteDirectorySDF: false,
                                    removePrefix: '',
                                    sourceFiles: 'MySQL/setup_docker.sh MySQL/env.sh')
                                ],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: false
                                    )
                                    ]
                                    )
                }
            }

        }
}
