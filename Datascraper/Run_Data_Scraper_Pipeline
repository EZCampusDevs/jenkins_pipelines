pipeline {
    agent any

        stages {
            
            stage('Build Env File') {
        
                steps {
        
                  withCredentials([usernamePassword(credentialsId: 'MYSQL_USER_PASS_3', passwordVariable: 'PASSWORD_1', usernameVariable: 'USERNAME_1')]) {
        
                    writeFile file: './variables.sh', text: """#!/bin/sh
DB_USERNAME="${USERNAME_1}"
DB_PASSWORD="${PASSWORD_1}"
DB_NAME="ezcampus_db"
DB_PORT="3306"
DB_HOST="mysql-instance"
"""
                  }
                }
            }

            stage('SSH Run Scraper') {

                steps {

                    withCredentials([usernamePassword(credentialsId: 'MYSQL_USER_PASS_3', passwordVariable: 'PASSWORD_1', usernameVariable: 'USERNAME_1')]) {

                        sshPublisher(
                                publishers: [
                                sshPublisherDesc(
                                    configName: "${SSH_SERVER}",
                                    transfers: [
                                    sshTransfer(cleanRemote: false,
                                        excludes: '',
                                        execCommand: '''
                                        cd pipeline_run_datascraper/
                                        
                                        log_dir="$HOME/log/jenkins-ssh"
                                        mkdir -p $log_dir
                                
                                        log_file="$log_dir/run-datascraper-log.out"
                                        touch $log_file
                                
                                        exec 3>&1 4>&2
                                        trap 'exec 2>&4 1>&3' 0 1 2 3
                                        exec 1>$log_file 2>&1
                                        

                                        
                                        chmod +x ./variables.sh
                                        . ./variables.sh
                                        rm -f ./variables.sh

                                        
                                        
                                        container_name="datascraper_prod"
                                        
                                        if docker ps --format '{{.Names}}' | grep -wq "$container_name"; then
                                        
                                            echo "Container $container_name already is running."
                                        
                                            exit 1
                                        
                                        else
                                        
                                            echo "Pre run echo"
                                            echo "Log dir is mounted in $HOME/log/dscrape make sure all users have write permission for this folder"
                                        
                                            docker run --rm -itd --network EZnet \
                                               --name "$container_name" \
                                               -v "$HOME/log/dscrape":/home/data_scraper/logs \
                                               -e LOG_DIR="/home/data_scraper/logs" \
                                               -e LOG_LEVEL="20" \
                                               -e DB_HOST="$DB_HOST" \
                                               -e DB_NAME="$DB_NAME" \
                                               -e DB_USER="$DB_USERNAME" \
                                               -e DB_PASSWORD="$DB_PASSWORD" \
                                               -e DB_PORT="$DB_PORT" \
                                               dscrape -s 0,3
                                        
                                            echo "Post run echo"
                                        
                                        fi
                                        ''',
                                        execTimeout: 120000,
                                        flatten: false,
                                        makeEmptyDirs: false,
                                        noDefaultExcludes: false,
                                        patternSeparator: '[, ]+',
                                        remoteDirectory: 'pipeline_run_datascraper',
                                        remoteDirectorySDF: false,
                                        removePrefix: '',
                                        sourceFiles: 'variables.sh')
                                            ],
                                            usePromotionTimestamp: false,
                                            useWorkspaceInPromotion: false,
                                            verbose: false
                                                )
                                                ]
                                                )
                    }


                }
            }

        }

    post {
        always {
            discordSend(
                    description: currentBuild.result, 
                    enableArtifactsList: false, 
                    footer: '', 
                    image: '', 
                    link: '', 
                    result: currentBuild.result, 
                    scmWebUrl: '', 
                    thumbnail: '', 
                    title: env.JOB_BASE_NAME, 
                    webhookURL: "${DISCORD_WEBHOOK_1}"
                    )
        }
    }
}
