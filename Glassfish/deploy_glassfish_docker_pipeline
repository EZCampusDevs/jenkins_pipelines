pipeline {
    agent any

        stages {
            
            stage('Build Env File') {
        
                steps {
        
                    withCredentials([usernamePassword(credentialsId: 'MYSQL_USER_PASS_1', passwordVariable: 'PASSWORD_1', usernameVariable: 'USERNAME_1')]) {
        
                        writeFile file: './variables.sh', text: """#!/bin/sh
DB_USERNAME="${USERNAME_1}"
DB_PASSWORD="${PASSWORD_1}"
DB_NAME="ezcampus_db"
DB_PORT="3306"
DB_HOST="mysql-instance"
"""
                    }
                }
            }

            
            stage('Deploy Glassfish Docker') {

                steps {

                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: '2GB_Glassfish_VPS',
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: false,
                                transfers: [
                                    sshTransfer(
                                        cleanRemote: false,
                                        excludes: '',
                                        execCommand: '''
                                            cd pipeline_glassfish_deploy
                                            
                                            
                                            log_dir="$HOME/log/jenkins-ssh"
                                            mkdir -p $log_dir
                                    
                                            log_file="$log_dir/pipeline_glassfish_deploy.out"
                                            touch $log_file
                                    
                                            exec 3>&1 4>&2
                                            trap 'exec 2>&4 1>&3' 0 1 2 3
                                            exec 1>$log_file 2>&1
                                            
    
                                            
                                            chmod +x ./variables.sh
                                            . ./variables.sh
                                            rm -f ./variables.sh
    
    
    
                                            
                                            is_container_running() {
                                            
                                               container_name="$1"
                                            
                                               if [ "$(docker inspect -f '{{.State.Running}}' "$container_name" 2>/dev/null)" = "true" ]; then
                                            
                                                  return 0
                                            
                                               else 
                                            
                                                  return 1
                                            
                                               fi
                                            
                                            }
                                            
                                            kill_and_wait_until_container_stopped() {
                                            
                                               container_name="$1"
                                            
                                               while is_container_running $container_name; do
                                            
                                                  docker stop "$container_name" || true
                                            
                                                  echo "Waiting for container to stop..."
                                            
                                                  sleep 1
                                               done
                                            }
                                            
                                            new_container() {
                                            
                                                container="$1"
                                                port="$2"
                                                num="$3"
                                                kill_num="$4"
                                                
                                                auto_deploy="$HOME/volumes/glassfish/autodeploy_${num}"
                                                apps="$HOME/volumes/glassfish/apps_${num}"
                                                                                           
                                                mkdir -p "${auto_deploy}"
                                                mkdir -p "${apps}"
                                                
                                                chmod -R 770 "${auto_deploy}"
                                                chmod -R 770 "${apps}"
                                                
                                                if ! is_container_running "${container}_${num}"; then
                                                
                                                    echo "Starting docker container ${num}"
 
                                                    docker run -itd --rm \
                                                        -p "$port:8080" \
                                                        -v "${auto_deploy}":/opt/app/glassfish7/glassfish/domains/domain1/autodeploy \
                                                        -v "${apps}":/opt/app/glassfish7/glassfish/domains/domain1/config/apps \
                                                        -e DB_USER="$DB_USERNAME" \
                                                        -e DB_PASSWORD="$DB_PASSWORD" \
                                                        -e DB_PORT="$DB_PORT" \
                                                        -e DB_HOST="$DB_HOST" \
                                                        -e DB_NAME="$DB_NAME" \
                                                        -e IS_DEBUG="false" \
                                                        -e LOG_DIR="./apps/searchIndex/logs" \
                                                        --network EZnet \
                                                        --name "${container}_${num}" \
                                                        glassfish7
                                                        
                                                    echo "Docker container ${num} started, waiting 15 seconds of grace..."
                                                    
                                                    sleep 15
                                                
                                                    echo "Killing container ${kill_num}"
                                                    
                                                    kill_and_wait_until_container_stopped "${container}_${kill_num}"
                                                    
                                                    return 0
                                                
                                                fi
                                                
                                                return 1
                                                
                                            }



                                            container="glassfish_prod"

                                            if ! new_container "$container" "8081" "a" "b"; then
                                            
                                                if ! new_container "$container" "8082" "b" "a"; then
                                                
                                                    exit 1
                                                    
                                                fi
                                            
                                            fi

                                            
                                        ''',
                                        execTimeout: 120000,
                                        flatten: false,
                                        makeEmptyDirs: false,
                                        noDefaultExcludes: false,
                                        patternSeparator: '[, ]+',
                                        remoteDirectory: 'pipeline_glassfish_deploy',
                                        remoteDirectorySDF: false,
                                        removePrefix: '',
                                        sourceFiles: 'variables.sh'
                                    )
                                ]
                                            
                            )
                        ]
                    )
                    


                }
            }

        }

        post {
            always {
                discordSend(
                    description: currentBuild.result, 
                    enableArtifactsList: false, 
                    footer: '', 
                    image: '', 
                    link: '', 
                    result: currentBuild.result, 
                    scmWebUrl: '', 
                    thumbnail: '', 
                    title: env.JOB_BASE_NAME, 
                    webhookURL: "${DISCORD_WEBHOOK_1}"
                )
            }
        }
}
